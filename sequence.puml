@startuml ingress
participant client
participant 3scale
participant ingress
entity platform.upload.servicename
entity platform.upload.validation
participant pup
participant hbi
entity platform.upload.available
database s3permanent
database s3rejected
client->3scale: insights-client payload
3scale->ingress: insights-client payload
ingress->ingress: check file size, service name, media type
alt check failure
    ingress->3scale: HTTP status code (413/415)
else check success
    ingress->3scale: HTTP status code (202)
end
3scale->client: HTTP response
ingress-[#blue]>s3permanent: upload payload to s3
alt if metadata included
    ingress-[#purple]>hbi: POST data: [{"facts": {"facts": {some_facts}}}]
    hbi-[#purple]>ingress: Response from HBI
    Note left of hbi: Response: {"total": 1,\n"errors": 0,\n"data": [{"status": 0,\n"host": <host_json with facts, insights_id, id, etc.>}]}
    Note left of hbi: See HBI api.spec for more details
end
ingress->platform.upload.servicename: msg to validating service
Note right of ingress: {"request_id": "abcd1234",\n"account": "00001",\n"principal": "123456",\n"b64_identity": "base64_identity_string",\n"service": "validating service",\n"category": "file category",\n"url": "s3_url",\n"size": "1234",\n"timestamp": "ISO Time",\n"id": "inv id if available",\n"metadata": {}}
platform.upload.servicename->pup: PUP example
pup->pup: validates the payload
pup->platform.upload.validation: respondes with success/failure status
platform.upload.validation->ingress: response from validating service
Note left of platform.upload.validation: {"request_id": "abcd1234",\n"validation": "success"/"failure"}
alt success
    ingress->platform.upload.available: advertise to platform
    Note right of ingress: *same message as validation\n*includes any additional data from validating service
else failure
    ingress<-[#blue]-s3permanent: Copy payload to rejected bucket
    ingress-[#blue]>s3rejected
end
@enduml